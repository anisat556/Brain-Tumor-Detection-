{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18762,"status":"ok","timestamp":1698708887448,"user":{"displayName":"Maheswari Muruganandam","userId":"00705321192249756745"},"user_tz":360},"id":"b76652cf","outputId":"c5381b01-1cc6-45a2-8292-82cf157b2e90"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["\n","from google.colab import drive\n","drive.mount('/content/drive')\n"],"id":"b76652cf"},{"cell_type":"code","execution_count":null,"metadata":{"id":"78ae10bb"},"outputs":[],"source":["\n","# Please replace the brackets below with the drive location of your folders which included subfolders for images\n","# Sample path: /content/drive/My Drive/ImageClassification\n","TRAINING_PATH = '/content/drive/Shareddrives/1:1_Anisha/Data/Train'\n","VALIDATION_PATH = '/content/drive/Shareddrives/1:1_Anisha/Data/Validation'"],"id":"78ae10bb"},{"cell_type":"code","execution_count":null,"metadata":{"id":"0bcb8666"},"outputs":[],"source":["def create_model(base_model, num_classes):\n","    import tensorflow as tf\n","    # Grab the last layer and add a few extra layers to it\n","    x=base_model.output\n","    x=GlobalAveragePooling2D()(x)\n","    # Dense layer 1\n","    x=tf.keras.layers.Dense(100,activation='relu', kernel_initializer=tf.keras.initializers.VarianceScaling(), use_bias=True)(x)\n","\n","    # Final layer with softmax activation\n","    preds=tf.keras.layers.Dense(num_classes,activation='softmax', kernel_initializer=tf.keras.initializers.VarianceScaling(), use_bias=False)(x)\n","\n","    # Create the final model\n","    model=Model(inputs=base_model.input,outputs=preds)\n","    return model\n"],"id":"0bcb8666"},{"cell_type":"code","execution_count":null,"metadata":{"id":"a7733499"},"outputs":[],"source":["def get_optimizer(optimizer_name, learning_rate):\n","    # Import keras optimizers\n","    from tensorflow.keras.optimizers import Adam, Adadelta, Adagrad, Adamax, Ftrl, Nadam, RMSprop, SGD\n","    print('Selected Optimizer', optimizer_name)\n","    switcher = {\n","        'Adadelta': Adadelta(learning_rate=learning_rate),\n","        'Adagrad': Adagrad(learning_rate=learning_rate),\n","        'Adam': Adam(learning_rate=learning_rate),\n","        'Adamax': Adamax(learning_rate=learning_rate),\n","        'FTRL': Ftrl(learning_rate=learning_rate),\n","        'NAdam': Nadam(learning_rate=learning_rate),\n","        'RMSprop': RMSprop(learning_rate=learning_rate),\n","        'Gradient Descent': SGD(learning_rate=learning_rate)\n","    }\n","    # If optimizer_name is empty, Adam will be return as default optimizer\n","    return switcher.get(optimizer_name, Adam(learning_rate=learning_rate))\n"],"id":"a7733499"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"e1978032","outputId":"a81a6d6d-fa82-493b-984e-cc60faaa9bdf"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 16440 images belonging to 4 classes.\n","Found 2160 images belonging to 4 classes.\n","dict_keys(['Normal', 'glioma_tumor', 'meningioma_tumor', 'pituitary_tumor'])\n","Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_0.35_224_no_top.h5\n","2019640/2019640 [==============================] - 1s 0us/step\n","154\n","Selected Optimizer Adam\n","Epoch 1/40\n","514/514 [==============================] - 7324s 14s/step - loss: 0.7233 - accuracy: 0.7069 - val_loss: 0.5861 - val_accuracy: 0.7685\n","Epoch 2/40\n","514/514 [==============================] - 50s 98ms/step - loss: 0.5301 - accuracy: 0.7934 - val_loss: 0.5222 - val_accuracy: 0.7907\n","Epoch 3/40\n","514/514 [==============================] - 51s 100ms/step - loss: 0.4628 - accuracy: 0.8220 - val_loss: 0.4693 - val_accuracy: 0.8153\n","Epoch 4/40\n","514/514 [==============================] - 50s 97ms/step - loss: 0.4122 - accuracy: 0.8401 - val_loss: 0.4482 - val_accuracy: 0.8264\n","Epoch 5/40\n","514/514 [==============================] - 49s 96ms/step - loss: 0.3700 - accuracy: 0.8578 - val_loss: 0.4324 - val_accuracy: 0.8352\n","Epoch 6/40\n","514/514 [==============================] - 50s 97ms/step - loss: 0.3403 - accuracy: 0.8689 - val_loss: 0.4095 - val_accuracy: 0.8361\n","Epoch 7/40\n","514/514 [==============================] - 50s 96ms/step - loss: 0.3070 - accuracy: 0.8822 - val_loss: 0.4471 - val_accuracy: 0.8171\n","Epoch 8/40\n","514/514 [==============================] - 51s 100ms/step - loss: 0.2825 - accuracy: 0.8917 - val_loss: 0.4753 - val_accuracy: 0.8185\n","Epoch 9/40\n","514/514 [==============================] - 49s 96ms/step - loss: 0.2571 - accuracy: 0.9027 - val_loss: 0.3861 - val_accuracy: 0.8528\n","Epoch 10/40\n","514/514 [==============================] - 50s 97ms/step - loss: 0.2328 - accuracy: 0.9112 - val_loss: 0.3891 - val_accuracy: 0.8537\n","Epoch 11/40\n","514/514 [==============================] - 50s 98ms/step - loss: 0.2203 - accuracy: 0.9169 - val_loss: 0.3753 - val_accuracy: 0.8593\n","Epoch 12/40\n","514/514 [==============================] - 49s 95ms/step - loss: 0.1971 - accuracy: 0.9246 - val_loss: 0.3849 - val_accuracy: 0.8569\n","Epoch 13/40\n","514/514 [==============================] - 49s 96ms/step - loss: 0.1854 - accuracy: 0.9316 - val_loss: 0.4156 - val_accuracy: 0.8551\n","Epoch 14/40\n","514/514 [==============================] - 49s 95ms/step - loss: 0.1688 - accuracy: 0.9374 - val_loss: 0.3887 - val_accuracy: 0.8625\n","Epoch 15/40\n","514/514 [==============================] - 49s 96ms/step - loss: 0.1631 - accuracy: 0.9394 - val_loss: 0.4565 - val_accuracy: 0.8532\n","Epoch 16/40\n","514/514 [==============================] - 50s 98ms/step - loss: 0.1461 - accuracy: 0.9469 - val_loss: 0.3858 - val_accuracy: 0.8694\n","Epoch 17/40\n","514/514 [==============================] - 50s 97ms/step - loss: 0.1257 - accuracy: 0.9521 - val_loss: 0.3597 - val_accuracy: 0.8759\n","Epoch 18/40\n","514/514 [==============================] - 50s 97ms/step - loss: 0.1198 - accuracy: 0.9561 - val_loss: 0.3832 - val_accuracy: 0.8667\n","Epoch 19/40\n","514/514 [==============================] - 49s 95ms/step - loss: 0.1135 - accuracy: 0.9596 - val_loss: 0.3889 - val_accuracy: 0.8681\n","Epoch 20/40\n","514/514 [==============================] - 49s 95ms/step - loss: 0.1113 - accuracy: 0.9599 - val_loss: 0.4732 - val_accuracy: 0.8565\n","Epoch 21/40\n","514/514 [==============================] - 50s 97ms/step - loss: 0.0952 - accuracy: 0.9671 - val_loss: 0.4371 - val_accuracy: 0.8606\n","Epoch 22/40\n","514/514 [==============================] - 49s 96ms/step - loss: 0.0797 - accuracy: 0.9737 - val_loss: 0.4011 - val_accuracy: 0.8713\n","Epoch 23/40\n","514/514 [==============================] - 52s 100ms/step - loss: 0.0839 - accuracy: 0.9704 - val_loss: 0.5052 - val_accuracy: 0.8481\n","Epoch 24/40\n","514/514 [==============================] - 49s 96ms/step - loss: 0.0805 - accuracy: 0.9724 - val_loss: 0.4365 - val_accuracy: 0.8759\n","Epoch 25/40\n","514/514 [==============================] - 49s 95ms/step - loss: 0.0746 - accuracy: 0.9737 - val_loss: 0.4395 - val_accuracy: 0.8796\n","Epoch 26/40\n","514/514 [==============================] - 49s 94ms/step - loss: 0.0564 - accuracy: 0.9816 - val_loss: 0.5829 - val_accuracy: 0.8403\n","Epoch 27/40\n","514/514 [==============================] - 49s 95ms/step - loss: 0.0603 - accuracy: 0.9788 - val_loss: 0.5226 - val_accuracy: 0.8681\n","Epoch 28/40\n","514/514 [==============================] - 50s 97ms/step - loss: 0.0597 - accuracy: 0.9790 - val_loss: 0.4872 - val_accuracy: 0.8755\n","Epoch 29/40\n","514/514 [==============================] - 49s 95ms/step - loss: 0.0500 - accuracy: 0.9830 - val_loss: 0.4554 - val_accuracy: 0.8750\n","Epoch 30/40\n","514/514 [==============================] - 49s 94ms/step - loss: 0.0478 - accuracy: 0.9826 - val_loss: 0.4786 - val_accuracy: 0.8773\n","Epoch 31/40\n","514/514 [==============================] - 48s 94ms/step - loss: 0.0493 - accuracy: 0.9832 - val_loss: 0.6256 - val_accuracy: 0.8417\n","Epoch 32/40\n","514/514 [==============================] - 49s 96ms/step - loss: 0.0470 - accuracy: 0.9849 - val_loss: 0.5886 - val_accuracy: 0.8597\n","Epoch 33/40\n","514/514 [==============================] - 50s 96ms/step - loss: 0.0342 - accuracy: 0.9897 - val_loss: 0.4915 - val_accuracy: 0.8731\n","Epoch 34/40\n","514/514 [==============================] - 50s 97ms/step - loss: 0.0346 - accuracy: 0.9894 - val_loss: 0.5404 - val_accuracy: 0.8708\n","Epoch 35/40\n","514/514 [==============================] - 48s 94ms/step - loss: 0.0431 - accuracy: 0.9849 - val_loss: 0.5729 - val_accuracy: 0.8699\n","Epoch 36/40\n","514/514 [==============================] - 49s 95ms/step - loss: 0.0440 - accuracy: 0.9845 - val_loss: 0.5300 - val_accuracy: 0.8806\n","Epoch 37/40\n","514/514 [==============================] - 50s 97ms/step - loss: 0.0388 - accuracy: 0.9863 - val_loss: 0.5085 - val_accuracy: 0.8764\n","Epoch 38/40\n","514/514 [==============================] - 52s 100ms/step - loss: 0.0263 - accuracy: 0.9912 - val_loss: 0.5197 - val_accuracy: 0.8847\n","Epoch 39/40\n","514/514 [==============================] - 49s 96ms/step - loss: 0.0300 - accuracy: 0.9907 - val_loss: 0.6004 - val_accuracy: 0.8713\n","Epoch 40/40\n","514/514 [==============================] - 49s 96ms/step - loss: 0.0335 - accuracy: 0.9887 - val_loss: 0.5246 - val_accuracy: 0.8894\n"]}],"source":["\n","# Import packages needed to create a image classification model\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import tensorflow as tf\n","\n","from keras.applications.resnet import preprocess_input\n","from keras.preprocessing.image import ImageDataGenerator\n","from keras.layers import Dense,GlobalAveragePooling2D\n","from keras.models import Model\n","from tensorflow.keras import regularizers\n","\n","from tensorflow.keras.preprocessing import image_dataset_from_directory\n","from keras.callbacks import EarlyStopping\n","from tensorflow import keras\n","\n","# Initialize hyper params\n","epochs = 40 #<-- increase for higher accuracy\n","base_learning_rate = 0.001 #decrease for different results; use excel sheet to note down results from each change to learning rate and epochs\n","optimizer = 'Adam'\n","BATCH_SIZE = 32\n","\n","IMG_SIZE = (224, 224)\n","\n","# Create the data generation pipeline for training and validation\n","train_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\n","validation_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\n","\n","train_generator = train_datagen.flow_from_directory(TRAINING_PATH,\n","                                                target_size=IMG_SIZE,\n","                                                color_mode='rgb',\n","                                                batch_size=BATCH_SIZE,\n","                                                class_mode='categorical',\n","                                                shuffle=True,\n","                                                )\n","validation_generator = validation_datagen.flow_from_directory(VALIDATION_PATH,\n","                                                target_size=IMG_SIZE,\n","                                                color_mode='rgb',\n","                                                batch_size=BATCH_SIZE,\n","                                                class_mode='categorical',\n","                                                shuffle=True,\n","                                                )\n","\n","print(validation_generator.class_indices.keys())\n","# Download the model, valid alpha values [0.25,0.35,0.5,0.75,1]\n","base_model = tf.keras.applications.mobilenet_v2.MobileNetV2(input_shape=(224, 224, 3), include_top=False, weights='imagenet', alpha=0.35)\n","for layer in base_model.layers:\n","    layer.trainable=False\n","\n","# Specify the number of classes\n","num_classes = 4\n","\n","# Create the base model\n","model = create_model(base_model,num_classes)\n","\n","print(len(base_model.layers))\n","\n","model.compile(optimizer = get_optimizer(optimizer_name=optimizer,learning_rate=base_learning_rate),loss='CategoricalCrossentropy',metrics=['accuracy'])\n","# Adam optimizer\n","# loss function will be categorical cross entropy\n","# evaluation metric will be accuracy\n","\n","early_stopping_monitor = EarlyStopping(\n","    monitor='val_loss',\n","    min_delta=0,\n","    patience=30,\n","    verbose=0,\n","    mode='auto',\n","    baseline=None,\n","    restore_best_weights=True\n",")\n","\n","step_size_train = train_generator.n//train_generator.batch_size\n","history_fine = model.fit(train_generator,\n","                        epochs=epochs,\n","                        validation_data = validation_generator,\n","                        verbose=1)"],"id":"e1978032"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"VwPvIofVzOlH","outputId":"78974d26-0719-4ab1-b8c6-0b3dfd90ebed"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                Output Shape                 Param #   Connected to                  \n","==================================================================================================\n"," input_1 (InputLayer)        [(None, 224, 224, 3)]        0         []                            \n","                                                                                                  \n"," Conv1 (Conv2D)              (None, 112, 112, 16)         432       ['input_1[0][0]']             \n","                                                                                                  \n"," bn_Conv1 (BatchNormalizati  (None, 112, 112, 16)         64        ['Conv1[0][0]']               \n"," on)                                                                                              \n","                                                                                                  \n"," Conv1_relu (ReLU)           (None, 112, 112, 16)         0         ['bn_Conv1[0][0]']            \n","                                                                                                  \n"," expanded_conv_depthwise (D  (None, 112, 112, 16)         144       ['Conv1_relu[0][0]']          \n"," epthwiseConv2D)                                                                                  \n","                                                                                                  \n"," expanded_conv_depthwise_BN  (None, 112, 112, 16)         64        ['expanded_conv_depthwise[0][0\n","  (BatchNormalization)                                              ]']                           \n","                                                                                                  \n"," expanded_conv_depthwise_re  (None, 112, 112, 16)         0         ['expanded_conv_depthwise_BN[0\n"," lu (ReLU)                                                          ][0]']                        \n","                                                                                                  \n"," expanded_conv_project (Con  (None, 112, 112, 8)          128       ['expanded_conv_depthwise_relu\n"," v2D)                                                               [0][0]']                      \n","                                                                                                  \n"," expanded_conv_project_BN (  (None, 112, 112, 8)          32        ['expanded_conv_project[0][0]'\n"," BatchNormalization)                                                ]                             \n","                                                                                                  \n"," block_1_expand (Conv2D)     (None, 112, 112, 48)         384       ['expanded_conv_project_BN[0][\n","                                                                    0]']                          \n","                                                                                                  \n"," block_1_expand_BN (BatchNo  (None, 112, 112, 48)         192       ['block_1_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_1_expand_relu (ReLU)  (None, 112, 112, 48)         0         ['block_1_expand_BN[0][0]']   \n","                                                                                                  \n"," block_1_pad (ZeroPadding2D  (None, 113, 113, 48)         0         ['block_1_expand_relu[0][0]'] \n"," )                                                                                                \n","                                                                                                  \n"," block_1_depthwise (Depthwi  (None, 56, 56, 48)           432       ['block_1_pad[0][0]']         \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_1_depthwise_BN (Batc  (None, 56, 56, 48)           192       ['block_1_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_1_depthwise_relu (Re  (None, 56, 56, 48)           0         ['block_1_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_1_project (Conv2D)    (None, 56, 56, 8)            384       ['block_1_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_1_project_BN (BatchN  (None, 56, 56, 8)            32        ['block_1_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_2_expand (Conv2D)     (None, 56, 56, 48)           384       ['block_1_project_BN[0][0]']  \n","                                                                                                  \n"," block_2_expand_BN (BatchNo  (None, 56, 56, 48)           192       ['block_2_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_2_expand_relu (ReLU)  (None, 56, 56, 48)           0         ['block_2_expand_BN[0][0]']   \n","                                                                                                  \n"," block_2_depthwise (Depthwi  (None, 56, 56, 48)           432       ['block_2_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_2_depthwise_BN (Batc  (None, 56, 56, 48)           192       ['block_2_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_2_depthwise_relu (Re  (None, 56, 56, 48)           0         ['block_2_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_2_project (Conv2D)    (None, 56, 56, 8)            384       ['block_2_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_2_project_BN (BatchN  (None, 56, 56, 8)            32        ['block_2_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_2_add (Add)           (None, 56, 56, 8)            0         ['block_1_project_BN[0][0]',  \n","                                                                     'block_2_project_BN[0][0]']  \n","                                                                                                  \n"," block_3_expand (Conv2D)     (None, 56, 56, 48)           384       ['block_2_add[0][0]']         \n","                                                                                                  \n"," block_3_expand_BN (BatchNo  (None, 56, 56, 48)           192       ['block_3_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_3_expand_relu (ReLU)  (None, 56, 56, 48)           0         ['block_3_expand_BN[0][0]']   \n","                                                                                                  \n"," block_3_pad (ZeroPadding2D  (None, 57, 57, 48)           0         ['block_3_expand_relu[0][0]'] \n"," )                                                                                                \n","                                                                                                  \n"," block_3_depthwise (Depthwi  (None, 28, 28, 48)           432       ['block_3_pad[0][0]']         \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_3_depthwise_BN (Batc  (None, 28, 28, 48)           192       ['block_3_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_3_depthwise_relu (Re  (None, 28, 28, 48)           0         ['block_3_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_3_project (Conv2D)    (None, 28, 28, 16)           768       ['block_3_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_3_project_BN (BatchN  (None, 28, 28, 16)           64        ['block_3_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_4_expand (Conv2D)     (None, 28, 28, 96)           1536      ['block_3_project_BN[0][0]']  \n","                                                                                                  \n"," block_4_expand_BN (BatchNo  (None, 28, 28, 96)           384       ['block_4_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_4_expand_relu (ReLU)  (None, 28, 28, 96)           0         ['block_4_expand_BN[0][0]']   \n","                                                                                                  \n"," block_4_depthwise (Depthwi  (None, 28, 28, 96)           864       ['block_4_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_4_depthwise_BN (Batc  (None, 28, 28, 96)           384       ['block_4_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_4_depthwise_relu (Re  (None, 28, 28, 96)           0         ['block_4_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_4_project (Conv2D)    (None, 28, 28, 16)           1536      ['block_4_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_4_project_BN (BatchN  (None, 28, 28, 16)           64        ['block_4_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_4_add (Add)           (None, 28, 28, 16)           0         ['block_3_project_BN[0][0]',  \n","                                                                     'block_4_project_BN[0][0]']  \n","                                                                                                  \n"," block_5_expand (Conv2D)     (None, 28, 28, 96)           1536      ['block_4_add[0][0]']         \n","                                                                                                  \n"," block_5_expand_BN (BatchNo  (None, 28, 28, 96)           384       ['block_5_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_5_expand_relu (ReLU)  (None, 28, 28, 96)           0         ['block_5_expand_BN[0][0]']   \n","                                                                                                  \n"," block_5_depthwise (Depthwi  (None, 28, 28, 96)           864       ['block_5_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_5_depthwise_BN (Batc  (None, 28, 28, 96)           384       ['block_5_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_5_depthwise_relu (Re  (None, 28, 28, 96)           0         ['block_5_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_5_project (Conv2D)    (None, 28, 28, 16)           1536      ['block_5_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_5_project_BN (BatchN  (None, 28, 28, 16)           64        ['block_5_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_5_add (Add)           (None, 28, 28, 16)           0         ['block_4_add[0][0]',         \n","                                                                     'block_5_project_BN[0][0]']  \n","                                                                                                  \n"," block_6_expand (Conv2D)     (None, 28, 28, 96)           1536      ['block_5_add[0][0]']         \n","                                                                                                  \n"," block_6_expand_BN (BatchNo  (None, 28, 28, 96)           384       ['block_6_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_6_expand_relu (ReLU)  (None, 28, 28, 96)           0         ['block_6_expand_BN[0][0]']   \n","                                                                                                  \n"," block_6_pad (ZeroPadding2D  (None, 29, 29, 96)           0         ['block_6_expand_relu[0][0]'] \n"," )                                                                                                \n","                                                                                                  \n"," block_6_depthwise (Depthwi  (None, 14, 14, 96)           864       ['block_6_pad[0][0]']         \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_6_depthwise_BN (Batc  (None, 14, 14, 96)           384       ['block_6_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_6_depthwise_relu (Re  (None, 14, 14, 96)           0         ['block_6_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_6_project (Conv2D)    (None, 14, 14, 24)           2304      ['block_6_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_6_project_BN (BatchN  (None, 14, 14, 24)           96        ['block_6_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_7_expand (Conv2D)     (None, 14, 14, 144)          3456      ['block_6_project_BN[0][0]']  \n","                                                                                                  \n"," block_7_expand_BN (BatchNo  (None, 14, 14, 144)          576       ['block_7_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_7_expand_relu (ReLU)  (None, 14, 14, 144)          0         ['block_7_expand_BN[0][0]']   \n","                                                                                                  \n"," block_7_depthwise (Depthwi  (None, 14, 14, 144)          1296      ['block_7_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_7_depthwise_BN (Batc  (None, 14, 14, 144)          576       ['block_7_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_7_depthwise_relu (Re  (None, 14, 14, 144)          0         ['block_7_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_7_project (Conv2D)    (None, 14, 14, 24)           3456      ['block_7_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_7_project_BN (BatchN  (None, 14, 14, 24)           96        ['block_7_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_7_add (Add)           (None, 14, 14, 24)           0         ['block_6_project_BN[0][0]',  \n","                                                                     'block_7_project_BN[0][0]']  \n","                                                                                                  \n"," block_8_expand (Conv2D)     (None, 14, 14, 144)          3456      ['block_7_add[0][0]']         \n","                                                                                                  \n"," block_8_expand_BN (BatchNo  (None, 14, 14, 144)          576       ['block_8_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_8_expand_relu (ReLU)  (None, 14, 14, 144)          0         ['block_8_expand_BN[0][0]']   \n","                                                                                                  \n"," block_8_depthwise (Depthwi  (None, 14, 14, 144)          1296      ['block_8_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_8_depthwise_BN (Batc  (None, 14, 14, 144)          576       ['block_8_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_8_depthwise_relu (Re  (None, 14, 14, 144)          0         ['block_8_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_8_project (Conv2D)    (None, 14, 14, 24)           3456      ['block_8_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_8_project_BN (BatchN  (None, 14, 14, 24)           96        ['block_8_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_8_add (Add)           (None, 14, 14, 24)           0         ['block_7_add[0][0]',         \n","                                                                     'block_8_project_BN[0][0]']  \n","                                                                                                  \n"," block_9_expand (Conv2D)     (None, 14, 14, 144)          3456      ['block_8_add[0][0]']         \n","                                                                                                  \n"," block_9_expand_BN (BatchNo  (None, 14, 14, 144)          576       ['block_9_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_9_expand_relu (ReLU)  (None, 14, 14, 144)          0         ['block_9_expand_BN[0][0]']   \n","                                                                                                  \n"," block_9_depthwise (Depthwi  (None, 14, 14, 144)          1296      ['block_9_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_9_depthwise_BN (Batc  (None, 14, 14, 144)          576       ['block_9_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_9_depthwise_relu (Re  (None, 14, 14, 144)          0         ['block_9_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_9_project (Conv2D)    (None, 14, 14, 24)           3456      ['block_9_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_9_project_BN (BatchN  (None, 14, 14, 24)           96        ['block_9_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_9_add (Add)           (None, 14, 14, 24)           0         ['block_8_add[0][0]',         \n","                                                                     'block_9_project_BN[0][0]']  \n","                                                                                                  \n"," block_10_expand (Conv2D)    (None, 14, 14, 144)          3456      ['block_9_add[0][0]']         \n","                                                                                                  \n"," block_10_expand_BN (BatchN  (None, 14, 14, 144)          576       ['block_10_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_10_expand_relu (ReLU  (None, 14, 14, 144)          0         ['block_10_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_10_depthwise (Depthw  (None, 14, 14, 144)          1296      ['block_10_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_10_depthwise_BN (Bat  (None, 14, 14, 144)          576       ['block_10_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_10_depthwise_relu (R  (None, 14, 14, 144)          0         ['block_10_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_10_project (Conv2D)   (None, 14, 14, 32)           4608      ['block_10_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_10_project_BN (Batch  (None, 14, 14, 32)           128       ['block_10_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_11_expand (Conv2D)    (None, 14, 14, 192)          6144      ['block_10_project_BN[0][0]'] \n","                                                                                                  \n"," block_11_expand_BN (BatchN  (None, 14, 14, 192)          768       ['block_11_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_11_expand_relu (ReLU  (None, 14, 14, 192)          0         ['block_11_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_11_depthwise (Depthw  (None, 14, 14, 192)          1728      ['block_11_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_11_depthwise_BN (Bat  (None, 14, 14, 192)          768       ['block_11_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_11_depthwise_relu (R  (None, 14, 14, 192)          0         ['block_11_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_11_project (Conv2D)   (None, 14, 14, 32)           6144      ['block_11_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_11_project_BN (Batch  (None, 14, 14, 32)           128       ['block_11_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_11_add (Add)          (None, 14, 14, 32)           0         ['block_10_project_BN[0][0]', \n","                                                                     'block_11_project_BN[0][0]'] \n","                                                                                                  \n"," block_12_expand (Conv2D)    (None, 14, 14, 192)          6144      ['block_11_add[0][0]']        \n","                                                                                                  \n"," block_12_expand_BN (BatchN  (None, 14, 14, 192)          768       ['block_12_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_12_expand_relu (ReLU  (None, 14, 14, 192)          0         ['block_12_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_12_depthwise (Depthw  (None, 14, 14, 192)          1728      ['block_12_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_12_depthwise_BN (Bat  (None, 14, 14, 192)          768       ['block_12_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_12_depthwise_relu (R  (None, 14, 14, 192)          0         ['block_12_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_12_project (Conv2D)   (None, 14, 14, 32)           6144      ['block_12_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_12_project_BN (Batch  (None, 14, 14, 32)           128       ['block_12_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_12_add (Add)          (None, 14, 14, 32)           0         ['block_11_add[0][0]',        \n","                                                                     'block_12_project_BN[0][0]'] \n","                                                                                                  \n"," block_13_expand (Conv2D)    (None, 14, 14, 192)          6144      ['block_12_add[0][0]']        \n","                                                                                                  \n"," block_13_expand_BN (BatchN  (None, 14, 14, 192)          768       ['block_13_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_13_expand_relu (ReLU  (None, 14, 14, 192)          0         ['block_13_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_13_pad (ZeroPadding2  (None, 15, 15, 192)          0         ['block_13_expand_relu[0][0]']\n"," D)                                                                                               \n","                                                                                                  \n"," block_13_depthwise (Depthw  (None, 7, 7, 192)            1728      ['block_13_pad[0][0]']        \n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_13_depthwise_BN (Bat  (None, 7, 7, 192)            768       ['block_13_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_13_depthwise_relu (R  (None, 7, 7, 192)            0         ['block_13_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_13_project (Conv2D)   (None, 7, 7, 56)             10752     ['block_13_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_13_project_BN (Batch  (None, 7, 7, 56)             224       ['block_13_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_14_expand (Conv2D)    (None, 7, 7, 336)            18816     ['block_13_project_BN[0][0]'] \n","                                                                                                  \n"," block_14_expand_BN (BatchN  (None, 7, 7, 336)            1344      ['block_14_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_14_expand_relu (ReLU  (None, 7, 7, 336)            0         ['block_14_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_14_depthwise (Depthw  (None, 7, 7, 336)            3024      ['block_14_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_14_depthwise_BN (Bat  (None, 7, 7, 336)            1344      ['block_14_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_14_depthwise_relu (R  (None, 7, 7, 336)            0         ['block_14_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_14_project (Conv2D)   (None, 7, 7, 56)             18816     ['block_14_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_14_project_BN (Batch  (None, 7, 7, 56)             224       ['block_14_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_14_add (Add)          (None, 7, 7, 56)             0         ['block_13_project_BN[0][0]', \n","                                                                     'block_14_project_BN[0][0]'] \n","                                                                                                  \n"," block_15_expand (Conv2D)    (None, 7, 7, 336)            18816     ['block_14_add[0][0]']        \n","                                                                                                  \n"," block_15_expand_BN (BatchN  (None, 7, 7, 336)            1344      ['block_15_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_15_expand_relu (ReLU  (None, 7, 7, 336)            0         ['block_15_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_15_depthwise (Depthw  (None, 7, 7, 336)            3024      ['block_15_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_15_depthwise_BN (Bat  (None, 7, 7, 336)            1344      ['block_15_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_15_depthwise_relu (R  (None, 7, 7, 336)            0         ['block_15_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_15_project (Conv2D)   (None, 7, 7, 56)             18816     ['block_15_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_15_project_BN (Batch  (None, 7, 7, 56)             224       ['block_15_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_15_add (Add)          (None, 7, 7, 56)             0         ['block_14_add[0][0]',        \n","                                                                     'block_15_project_BN[0][0]'] \n","                                                                                                  \n"," block_16_expand (Conv2D)    (None, 7, 7, 336)            18816     ['block_15_add[0][0]']        \n","                                                                                                  \n"," block_16_expand_BN (BatchN  (None, 7, 7, 336)            1344      ['block_16_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_16_expand_relu (ReLU  (None, 7, 7, 336)            0         ['block_16_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_16_depthwise (Depthw  (None, 7, 7, 336)            3024      ['block_16_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_16_depthwise_BN (Bat  (None, 7, 7, 336)            1344      ['block_16_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_16_depthwise_relu (R  (None, 7, 7, 336)            0         ['block_16_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_16_project (Conv2D)   (None, 7, 7, 112)            37632     ['block_16_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_16_project_BN (Batch  (None, 7, 7, 112)            448       ['block_16_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," Conv_1 (Conv2D)             (None, 7, 7, 1280)           143360    ['block_16_project_BN[0][0]'] \n","                                                                                                  \n"," Conv_1_bn (BatchNormalizat  (None, 7, 7, 1280)           5120      ['Conv_1[0][0]']              \n"," ion)                                                                                             \n","                                                                                                  \n"," out_relu (ReLU)             (None, 7, 7, 1280)           0         ['Conv_1_bn[0][0]']           \n","                                                                                                  \n"," global_average_pooling2d (  (None, 1280)                 0         ['out_relu[0][0]']            \n"," GlobalAveragePooling2D)                                                                          \n","                                                                                                  \n"," dense (Dense)               (None, 100)                  128100    ['global_average_pooling2d[0][\n","                                                                    0]']                          \n","                                                                                                  \n"," dense_1 (Dense)             (None, 4)                    400       ['dense[0][0]']               \n","                                                                                                  \n","==================================================================================================\n","Total params: 538708 (2.06 MB)\n","Trainable params: 128500 (501.95 KB)\n","Non-trainable params: 410208 (1.56 MB)\n","__________________________________________________________________________________________________\n"]}],"source":["model.summary()\n"],"id":"VwPvIofVzOlH"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"VIV_LOPybQWa","outputId":"6b48b355-0a6d-480b-e1d3-d3a6dd3f3888"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 800x800 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 800x800 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["def visualization():\n","    import pandas as pd\n","    df = pd.DataFrame(history_fine.history)\n","    #loss plots\n","    plt.figure(figsize=(8,8))\n","    plt.plot(df['loss'], color='red', label = \"Training_loss\")\n","    plt.plot(df['val_loss'], color='blue')\n","    plt.legend(['Training Loss','Validation loss'],loc = 'best' )\n","    plt.title('Line plot of Training and Validation loss')\n","    plt.ylim(0,1)\n","    plt.show()\n","\n","    #accuracy plots\n","    plt.figure(figsize=(8,8))\n","    plt.plot(df['accuracy'], color='red')\n","    plt.plot(df['val_accuracy'], color='blue')\n","    plt.legend(['Training acc','Validation acc'],loc = 'best' )\n","    plt.title('Line plot of Training and Validation Accuracies')\n","    plt.ylim(0,1)\n","    plt.show()\n","\n","visualization()"],"id":"VIV_LOPybQWa"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"8756be45","outputId":"ce32b513-5ada-41d6-e615-12bea87925ce"},"outputs":[{"name":"stdout","output_type":"stream","text":["Training Accuracy:  [0.7069343328475952, 0.7933698296546936, 0.8220194578170776, 0.8400851488113403, 0.8577858805656433, 0.8689172863960266, 0.8822384476661682, 0.8916666507720947, 0.9027372002601624, 0.9111922383308411, 0.9169099926948547, 0.9246350526809692, 0.9316301941871643, 0.9374087452888489, 0.9394160509109497, 0.9468978047370911, 0.9521289467811584, 0.9560827016830444, 0.9596107006072998, 0.959854006767273, 0.9670924544334412, 0.9737226366996765, 0.9704379439353943, 0.9724452495574951, 0.9737226366996765, 0.9816301465034485, 0.9787712693214417, 0.9790145754814148, 0.9829683899879456, 0.9826034307479858, 0.983150839805603, 0.9848540425300598, 0.9896593689918518, 0.989355206489563, 0.9849148392677307, 0.9844890236854553, 0.9863138794898987, 0.9912408590316772, 0.9906934499740601, 0.9886861443519592]\n","Validation Accuracy:  [0.7685185074806213, 0.7907407283782959, 0.8152777552604675, 0.8263888955116272, 0.835185170173645, 0.8361111283302307, 0.8171296119689941, 0.8185185194015503, 0.8527777791023254, 0.8537036776542664, 0.8592592477798462, 0.8569444417953491, 0.8550925850868225, 0.862500011920929, 0.8532407283782959, 0.8694444298744202, 0.8759258985519409, 0.8666666746139526, 0.8680555820465088, 0.8564814925193787, 0.8606481552124023, 0.8712962865829468, 0.8481481671333313, 0.8759258985519409, 0.8796296119689941, 0.8402777910232544, 0.8680555820465088, 0.8754629492759705, 0.875, 0.8773148059844971, 0.8416666388511658, 0.8597221970558167, 0.8731481432914734, 0.8708333373069763, 0.8699073791503906, 0.8805555701255798, 0.8763889074325562, 0.8847222328186035, 0.8712962865829468, 0.8893518447875977]\n","Training Loss:  [0.7232844233512878, 0.5301482677459717, 0.46276697516441345, 0.4122004806995392, 0.37003204226493835, 0.3403269946575165, 0.30699393153190613, 0.2824558615684509, 0.2570751905441284, 0.23278166353702545, 0.2203182727098465, 0.19708894193172455, 0.1854170560836792, 0.16881300508975983, 0.16308490931987762, 0.14613918960094452, 0.12570981681346893, 0.11976664513349533, 0.11353686451911926, 0.11134348064661026, 0.09521510452032089, 0.07968206703662872, 0.08388642966747284, 0.08050211519002914, 0.07455427944660187, 0.056446660310029984, 0.060278963297605515, 0.05974770337343216, 0.04998105764389038, 0.04781410098075867, 0.04925057664513588, 0.046987831592559814, 0.03422627970576286, 0.034567058086395264, 0.04309101402759552, 0.04396558925509453, 0.038770079612731934, 0.02629934996366501, 0.030038993805646896, 0.03353448212146759]\n","Validation Loss:  [0.5861349105834961, 0.5222200155258179, 0.46925458312034607, 0.44817978143692017, 0.43241581320762634, 0.4094913601875305, 0.44712239503860474, 0.4752700924873352, 0.3861044943332672, 0.38914060592651367, 0.3753187358379364, 0.3849359154701233, 0.4155729413032532, 0.3886616826057434, 0.45650237798690796, 0.3857966959476471, 0.3597070276737213, 0.38315436244010925, 0.38891303539276123, 0.47315800189971924, 0.4371245801448822, 0.4010661542415619, 0.505204439163208, 0.43645647168159485, 0.43947404623031616, 0.5828524827957153, 0.5226170420646667, 0.48716509342193604, 0.45539388060569763, 0.4786362946033478, 0.625555157661438, 0.5885509848594666, 0.4914688169956207, 0.540398359298706, 0.5728604793548584, 0.5300409197807312, 0.5084618330001831, 0.5196593999862671, 0.6003597974777222, 0.524590015411377]\n","best model accuracy:  0.8759258985519409\n"]}],"source":["\n","# Import numpy for calculating best model accuracy\n","import numpy as np\n","# Populating matrics -> accuracy & loss\n","acc = history_fine.history['accuracy']\n","val_acc = history_fine.history['val_accuracy']\n","\n","loss = history_fine.history['loss']\n","val_loss = history_fine.history['val_loss']\n","\n","print('Training Accuracy: ', acc)\n","print('Validation Accuracy: ', val_acc)\n","print('Training Loss: ', loss)\n","print('Validation Loss: ', val_loss)\n","best_model_accuracy = history_fine.history['val_accuracy'][np.argmin(history_fine.history['val_loss'])]\n","print('best model accuracy: ', best_model_accuracy)\n"],"id":"8756be45"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"4c863fdc"},"outputs":[],"source":["def seperate_labels(generator):\n","    x_validation = []\n","    y_validation = []\n","    num_seen = 0\n","\n","    for x, labels in generator:\n","        x_validation.append(x)\n","        y_validation.append([argmax(label) for label in labels])\n","        num_seen += len(x)\n","        if num_seen == generator.n: break\n","\n","    x_validation = np.concatenate(x_validation)\n","    y_validation = np.concatenate(y_validation)\n","    return x_validation, y_validation\n"],"id":"4c863fdc"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"a650757c","outputId":"474788cc-555a-420d-d19b-335fefc3018f"},"outputs":[{"name":"stdout","output_type":"stream","text":["68/68 [==============================] - 2s 13ms/step\n"]}],"source":["\n","# Calculate and display the confusion matrix\n","import matplotlib.pyplot as plt\n","from numpy.core.fromnumeric import argmax\n","from sklearn.metrics import ConfusionMatrixDisplay\n","\n","x_validation, y_validation = seperate_labels(validation_generator)\n","y_pred = model.predict(x_validation, batch_size=BATCH_SIZE)\n","predictions = np.apply_along_axis(argmax, 1, y_pred)\n","display_labels = validation_generator.class_indices.keys()\n","\n","# ConfusionMatrixDisplay.from_predictions(y_validation, predictions, display_labels=display_labels, cmap=\"binary\")\n","# plt.show()\n"],"id":"a650757c"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"0hlIInn6bhOE","outputId":"b54b7588-d86c-4c3c-f8d4-0e00723e4898"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1000x1000 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import seaborn as sns\n","from sklearn.metrics import confusion_matrix, classification_report\n","plt.figure(figsize = (10,10))\n","sns.heatmap(confusion_matrix(y_validation, predictions), annot = True, fmt = 'g', cmap = \"Blues\",xticklabels=display_labels, yticklabels=display_labels)\n","plt.title(\"Confusion Matrix\")\n","plt.show()"],"id":"0hlIInn6bhOE"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"ek591f4PcMvK","outputId":"317172a6-d037-4ec2-d965-f64a3e3f20cd"},"outputs":[{"name":"stdout","output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.97      0.93      0.95       306\n","           1       0.85      0.87      0.86       631\n","           2       0.87      0.81      0.84       633\n","           3       0.91      0.97      0.94       590\n","\n","    accuracy                           0.89      2160\n","   macro avg       0.90      0.90      0.90      2160\n","weighted avg       0.89      0.89      0.89      2160\n","\n"]}],"source":["print(classification_report(y_validation, predictions))"],"id":"ek591f4PcMvK"},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# read a titanic.csv file\n","# from seaborn library\n","x=['Normal', 'Glioma', 'Meningioma', 'Pitituary']\n","y=[21, 85, 118, 15]\n","# class v / s fare barplot\n","sns.barplot(x = x, y = y, palette = 'magma')\n","\n","plt.xlabel('Type of Tumors')\n","plt.ylabel('False Predictions Numbers of Tumors')\n","plt.title('False Prediction Numbers for MobileNetV2')\n","\n","# Show the plot\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":581},"id":"hOwyzP_5x-E8","executionInfo":{"status":"ok","timestamp":1705971363937,"user_tz":420,"elapsed":476,"user":{"displayName":"ani sat","userId":"02985735554015643274"}},"outputId":"3ae39036-4255-4dd4-9f9e-25b47dee5793"},"id":"hOwyzP_5x-E8","execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-572869efdc69>:9: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x = x, y = y, palette = 'magma')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"f13b9f0c","outputId":"8c816b4a-036a-468b-ae8d-ef3bfbe49d31"},"outputs":[{"ename":"FileNotFoundError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-5dffeae6ef11>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Please replace the brackets below with the location of your image which need to predict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mimg_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'<>'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_img\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mIMG_SIZE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mimg_array\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimg_to_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mimg_batch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpand_dims\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg_array\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/image_utils.py\u001b[0m in \u001b[0;36mload_img\u001b[0;34m(path, grayscale, color_mode, target_size, interpolation, keep_aspect_ratio)\u001b[0m\n\u001b[1;32m    420\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpathlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    421\u001b[0m             \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 422\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    423\u001b[0m             \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpil_image\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    424\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '<>'"]}],"source":["\n","# Predicting code for an image\n","from tensorflow.keras.preprocessing import image\n","# Please replace the brackets below with the location of your image which need to predict\n","img_path = '<>'\n","img = image.load_img(img_path, target_size=IMG_SIZE)\n","img_array = image.img_to_array(img)\n","img_batch = np.expand_dims(img_array, axis=0)\n","img_preprocessed = preprocess_input(img_batch)\n","prediction = model.predict(img_preprocessed)\n","print(prediction)\n"],"id":"f13b9f0c"}],"metadata":{"accelerator":"GPU","colab":{"machine_shape":"hm","provenance":[{"file_id":"1cGS-XqlelZpoo-WOMa5AhmW3rmi5dI20","timestamp":1697248156220},{"file_id":"1kodshi7IaN_JqtlEsV5bn7WCBqzabNs1","timestamp":1685428949853},{"file_id":"1vtiqe4ChiKErzzE6lvfA-WUPwxH3oS4A","timestamp":1683914875497},{"file_id":"1b_idYmr0JOYT6X2dOsLzw25QB-la8O1t","timestamp":1672650124899},{"file_id":"17_UZwzcmAYzKCE279eaOMAklbbaUZN5H","timestamp":1670891677735},{"file_id":"1Zlv6RFpBOTiXg7rOnEaI_gXIY8H8PgaX","timestamp":1670887583215}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":5}